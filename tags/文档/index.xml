<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>文档 on Weiming Hu</title><link>https://huweim.github.io/tags/%E6%96%87%E6%A1%A3/</link><description>Recent content in 文档 on Weiming Hu</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 11 Feb 2025 14:04:29 +0000</lastBuildDate><atom:link href="https://huweim.github.io/tags/%E6%96%87%E6%A1%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>Software Design of GPGPU-Sim</title><link>https://huweim.github.io/post/%E6%96%87%E6%A1%A3_software-design-of-gpgpu-sim/</link><pubDate>Sun, 14 Nov 2021 20:35:44 +0800</pubDate><guid>https://huweim.github.io/post/%E6%96%87%E6%A1%A3_software-design-of-gpgpu-sim/</guid><description>&lt;p>4 Software Design of GPGPU-Sim&lt;/p>
&lt;p>所有标题都可以升一级，整个文档全是 manual 的第 4 章&lt;/p>
&lt;h1 id="1-file-list-and-brief-description">1. File list and brief description&lt;/h1>
&lt;ul>
&lt;li>cuda-sim - The functional simulator that executes PTX kernels generated by NVCC or OpenCL compiler&lt;/li>
&lt;li>gpgpu-sim - The performance simulator that simulates the timing behavior of a GPU (or other many core accelerator architectures)&lt;/li>
&lt;li>intersim - The interconnection network simulator adopted from Bill Dally&amp;rsquo;s BookSim&lt;/li>
&lt;/ul>
&lt;h2 id="11-overallutilities">1.1 Overall/Utilities&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>abstract_hardware_model.h abstract_hardware_model.cc&lt;/th>
 &lt;th>Provide a set of classes that interface between functional and timing simulator.&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>shader.h &lt;!-- raw HTML omitted -->shader.cc&lt;/td>
 &lt;td>SIMT core timing model. It calls cudu-sim for functional simulation of a particular thread and cuda-sim would return with performance-sensitive information for the thread.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>visualizer.h &lt;!-- raw HTML omitted -->visualizer.cc&lt;/td>
 &lt;td>Output dynamic statistics for the visualizer&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="13-gpgpu-sim">1.3 gpgpu-sim&lt;/h2>
&lt;p>几个需要注意的列出来，gluing 时钟频率，注意有单独的 gpu-cache.cc 和 l2cache.cc&lt;/p></description></item><item><title>文档_GPGPU-sim - Performance Simulation Engine</title><link>https://huweim.github.io/post/%E6%96%87%E6%A1%A3_gpgpu-sim---performance-simulation-engine/</link><pubDate>Tue, 28 Sep 2021 14:59:35 +0800</pubDate><guid>https://huweim.github.io/post/%E6%96%87%E6%A1%A3_gpgpu-sim---performance-simulation-engine/</guid><description>&lt;p>GPGPU-sim - Performance Simulation Engine&lt;/p>
&lt;h1 id="1-performance-model-software-objects">1 Performance Model Software Objects&lt;/h1>
&lt;div class="highlight-container">

 &lt;button class="copy-code-btn outline">Copy&lt;/button>

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>ldst_unit &lt;span style="color:#f92672">*&lt;/span>m_ldst_unit;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>前面的 m 可能表示这个类型的变量&lt;/p>
&lt;h2 id="12-simt-core-class">1.2 SIMT Core Class&lt;/h2>
&lt;p>SIMT Core 中的微架构在 shader.h/cc 的类 shader_core_ctx 中实现&lt;/p>
&lt;ul>
&lt;li>shd_warp_t objects 的集合用于建模每个 warp 在 core 中的状态&lt;/li>
&lt;li>simt_stack object, 处理每个 warp 的分支&lt;/li>
&lt;li>set of scheduler_unit obj, 选择 set 中 warp 的一条 or 多条指令发射执行&lt;/li>
&lt;li>Scoreboard obj 处理 data hazard&lt;/li>
&lt;li>opndcoll_rfu_t obj, model operand collector&lt;/li>
&lt;li>set of &lt;code>simd_function_unit&lt;/code> obj 实现 ALU pipeline&lt;/li>
&lt;li>&lt;code>ldst_unit&lt;/code> 实现 memory pipeline&lt;/li>
&lt;li>&lt;code>shader_memroy_interface&lt;/code> 将 SIMT Core 连接到相应的 SIMT Core Cluster&lt;/li>
&lt;/ul>
&lt;p>每个 core cycle, 调用 &lt;code>shader_core_ctx::cycle()&lt;/code> 来模拟 SIMT Core 的一个 cycle。cycle function 以按从下往上的顺序 (也就是从 writeback() 到 fetch()) 调用下列函数&lt;/p></description></item></channel></rss>