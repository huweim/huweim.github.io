<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技巧 on Cory Code</title><link>https://huweim.github.io/tags/%E6%8A%80%E5%B7%A7/</link><description>Recent content in 技巧 on Cory Code</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Athul</copyright><lastBuildDate>Fri, 08 Oct 2021 12:13:07 +0800</lastBuildDate><atom:link href="https://huweim.github.io/tags/%E6%8A%80%E5%B7%A7/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog_Hugo_文章写作格式</title><link>https://huweim.github.io/posts/blog_hugo_%E6%96%87%E7%AB%A0%E5%86%99%E4%BD%9C%E6%A0%BC%E5%BC%8F/</link><pubDate>Fri, 08 Oct 2021 12:13:07 +0800</pubDate><guid>https://huweim.github.io/posts/blog_hugo_%E6%96%87%E7%AB%A0%E5%86%99%E4%BD%9C%E6%A0%BC%E5%BC%8F/</guid><description>0. 前言 记录一下文章写作和 扉页标签的内容，文章完全转载自 博客
本文是 Hugo 使用记录的第二篇，介绍关于文章写作的一些问题，包括分类管理、排版技巧、特殊语法等，所有语法基于 LoveIt 主题。
Hugo支持的文章格式为.md，即用markdown语言编辑的文章。所有的文章都放在content/posts目录下，支持级联目录，即在posts目录下按分类建立多个子文件夹放置文章，比如本博客的文章按分类放在四个子文件夹下。
$ ls posts 爱编程爱技术的孩子/ 我所热爱的生活啊/ 平日里的白日梦/ 研究生的区块链学习之路/ 下面是三条方便清晰管理和生成文章的目录结构建议:
保持博客文章存放在 content/posts 目录, 例如: content/posts/我的第一篇文章.md 保持简单的静态页面存放在 content 目录, 例如: content/about.md 保持图片之类的媒体资源存放在 static 目录, 例如: static/images/screenshot.png 1. 前置参数 Hugo 允许在文章内容前面添加 yaml, toml 或者 json 格式的前置参数，LoveIt 默认文章模板提供的前置参数有
不过自己现在用的模板似乎不支持这么多参数
---title:&amp;#34;我的第一篇文章&amp;#34;subtitle:&amp;#34;&amp;#34;date:2020-03-04T15:58:26+08:00lastmod:2020-03-04T15:58:26+08:00draft:trueauthor:&amp;#34;&amp;#34;authorLink:&amp;#34;&amp;#34;description:&amp;#34;&amp;#34;license:&amp;#34;&amp;#34;tags:[]categories:[]hiddenFromHomePage:falsefeatured_image:&amp;#34;&amp;#34;featured_image_preview:&amp;#34;&amp;#34;toc:falseautoCollapseToc:truemath:truemapbox:accessToken:&amp;#34;&amp;#34;lightStyle:&amp;#34;&amp;#34;darkStyle:&amp;#34;&amp;#34;navigation:truegeolocate:truescale:truefullscreen:truelightgallery:truelinkToMarkdown:trueshare:enable:truecomment:true--- title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日期时间. draft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数, 这篇文章不会被渲染.</description></item><item><title>Blog_Hugo_归档页面制作</title><link>https://huweim.github.io/posts/blog_hugo_%E5%BD%92%E6%A1%A3%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/</link><pubDate>Fri, 08 Oct 2021 12:09:11 +0800</pubDate><guid>https://huweim.github.io/posts/blog_hugo_%E5%BD%92%E6%A1%A3%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/</guid><description>0. 前言 最近在学习使用 hugo 制作自己的博客，把制作过程的记录下来。我想博客应该会是之后的学习工作中会频繁使用和交互的东西。
本文记录添加 archives 页面的过程。目前使用的 Hugo 主题 Ink 需要自己添加归档页面
1. 新建归档页面模板 进入自己的 Hugo 主题文件夹，我自己的是 themes/hugo-ink
在主题文件夹的 layouts/_default 文件夹下新建文件 archives.html，内容直接复制 single.html
将 archives.html 文件中的 {{ .Content }} 替换为以下内容
{{ range (.Site.RegularPages.GroupByDate &amp;#34;2006&amp;#34;) }} &amp;lt;h3&amp;gt;{{ .Key }}&amp;lt;/h3&amp;gt; &amp;lt;ul class=&amp;#34;archive-list&amp;#34;&amp;gt; {{ range (where .Pages &amp;#34;Type&amp;#34; &amp;#34;posts&amp;#34;) }} &amp;lt;li&amp;gt; {{ .PublishDate.Format &amp;#34;2006-01-02&amp;#34; }} -&amp;gt; &amp;lt;a href=&amp;#34;{{ .RelPermalink }}&amp;#34;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; {{ end }} &amp;lt;/ul&amp;gt; {{ end }} 解释 {{ range (where .</description></item><item><title>Docker Image and Container</title><link>https://huweim.github.io/posts/docker%E5%B8%B8%E7%94%A8%E7%9A%84%E6%93%8D%E4%BD%9C/</link><pubDate>Fri, 17 Sep 2021 16:25:25 +0800</pubDate><guid>https://huweim.github.io/posts/docker%E5%B8%B8%E7%94%A8%E7%9A%84%E6%93%8D%E4%BD%9C/</guid><description>0. 前言 最近需要使用到 Docker, 记一下笔记和常用的操作。主要是参考菜鸟教程和阮一峰老师的教程。
1. 启动Docker服务 # service 命令的用法 $ sudo service docker start # systemctl 命令的用法 $ sudo systemctl start docker 2. Image文件 **Docker 把应用程序及其依赖，打包在 image 文件里面。**只有通过这个文件，才能生成 Docker 容器。 image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。
# 列出本机的所有 image 文件。 $ docker image ls $ docler images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu latest fb52e22af1b0 2 weeks ago 72.8MB hello-world latest d1165f221234 6 months ago 13.3kB ubuntu 15.</description></item><item><title>Blog_Hugo_About页面制作</title><link>https://huweim.github.io/posts/blog_hugo_about%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/</link><pubDate>Sat, 24 Jul 2021 19:19:09 +0800</pubDate><guid>https://huweim.github.io/posts/blog_hugo_about%E9%A1%B5%E9%9D%A2%E5%88%B6%E4%BD%9C/</guid><description>前言 最近在学习使用 hugo 制作自己的博客，把制作过程的记录下来。我想博客应该会是之后的学习工作中会频繁使用和交互的东西。
本文记录添加 about 页面的过程。
注：这个是使用 markdown 进行添加，并非制作 html 页面。Hugo 主题基于 Ink
添加 About 页面 右键打开 Git 命令行，输入
hugo new about.md 在文件夹 posts 的同级目录下新建了一个 about.md 文件。
修改 markdown 文件顶部的选项使其能够出现在首页菜单栏
title: &amp;#34;About&amp;#34; date: 2021-07-08T17:46:31+08:00 menu: &amp;#34;main&amp;#34; weight: 60 comment: false 预览 在根目录下打开 Git，输入命令
hugo -D server 在自己的浏览器上访问网址：http://localhost:1313/ 即可预览
Reference https://cpurely.github.io/post/hugo%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0about%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2/</description></item><item><title>Blog_Hugo_Windows下安装</title><link>https://huweim.github.io/posts/blog_hugo_win_install/</link><pubDate>Sat, 24 Jul 2021 16:33:34 +0800</pubDate><guid>https://huweim.github.io/posts/blog_hugo_win_install/</guid><description>Installing on Windows 假设 你知道如何打开一个命令提示窗口。 你运行的是一个现代64位的 Windows。 你的网站地址是 example.com。 你将使用 D:\Hugo\Sites 作为网站的起点。 你将使用 D:\Hugo\bin 存储可执行文件。 设置你的文件夹 你将需要一个存储 Hugo 可执行文件、博客内容（你创建的的那些文件），以及生成文件（Hugo 为你创建的 HTML）的地方。
打开 Windows Explorer。 创建一个新的文件夹，D:\Hugo。 创建一个新的文件夹，D:\Hugo\bin。 创建一个新的文件夹，D:\Hugo\Sites。 下载预先编译好的 Windows 版本的 Hugo 可执行文件 2021-07-07 11:25:22 为什么找不到 hugo 的命令了，可能是因为把文件夹 STU 改名改成了 ShanghaiTech，而 windows 需要配置环境变量。重新配置环境变量中的路径应该就可以了
:heavy_check_mark: 就是这个原因，不过注意是系统变量中
环境变量，简单来说就是在系统层面给这个程序的安装路径进行登记，使得我们通过CMD或Git直接输入程序名就能全局调用。
使用 go 编译 Hugo 的一个优势就是仅有一个二进制文件。你不需要运行安装程序来使用它。相反，你需要把这个二进制文件复制到你的硬盘上。我假设你将把它放在 D:\Hugo\bin 文件夹内。如果你选择放在其它的位置，你需要在下面的命令中替换为那些路径。
在浏览器中打开 https://github.com/spf13/hugo/releases。 当前的版本是 hugo_0.13_windows_amd64.zip。 下载那个 ZIP 文件，并保存到 D:\Hugo\bin 文件夹中。 在 Windows Explorer 中找到那个 ZIP 文件，并从中提取所有的文件。 你应该可以看到一个 hugo_0.</description></item><item><title>Blog_Hugo_基本部署</title><link>https://huweim.github.io/posts/blog_hugo_%E5%9F%BA%E6%9C%AC%E9%83%A8%E7%BD%B2/</link><pubDate>Sat, 24 Jul 2021 16:28:22 +0800</pubDate><guid>https://huweim.github.io/posts/blog_hugo_%E5%9F%BA%E6%9C%AC%E9%83%A8%E7%BD%B2/</guid><description>前言 记录一下从0开始的部署，之前3月弄的没有记笔记，7月就忘记了，还是 要好好整理好好记录。
假设现在已经安装好了 Hugo 环境，我使用的是 windows 下安装。
添加主题 有很多 Hugo Theme 可以选择
这里一开始用的是 archie，现在改成 Ink
cd blog;\ git init;\ git submodule add https://github.com/knadh/hugo-ink.git themes/hugo-ink;\ # Edit your config.toml configuration file # and add the Ananke theme. echo &amp;#39;theme = &amp;#34;ananke&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.toml 切换主题后 push github 报错的本质原因是没有执行 git submodule add, 即没有在文件 .gitmodules 中加入新的主题
发布文章 hugo new posts/XXX.md 会在 contene/posts 文件夹下生成 XXX.md 文件
title: &amp;#34;Blog_Hugo_基本部署&amp;#34; date: 2021-07-24T16:28:22+08:00 draft: false tags: [&amp;#34;博客&amp;#34;, &amp;#34;技巧&amp;#34;] categories: [&amp;#34;Hugo&amp;#34;] 为文章添加 tags, categories 以便分类</description></item><item><title>Git中常用的操作</title><link>https://huweim.github.io/posts/git_operation/</link><pubDate>Mon, 08 Mar 2021 19:12:40 +0800</pubDate><guid>https://huweim.github.io/posts/git_operation/</guid><description>Git中常用的操作 1. Remote Repo 1.1 Add Remote Repo $ git remote add origin git@github.com:huweim/repo_name.git 1.2 Delete Remote Repo Add a wrong remote repo, we could delete it. $ git remote -v origin git@github.com:huweim/huweim.github.io.git (fetch) origin git@github.com:huweim/huweim.github.io.git (push) Delete it $ git remote rm origin 1.3 Pull Origin Master to Local :x:似乎 push 之前如果有东西需要先 pull
是因为远端已经创建了 README.md，local 也有README.md。有冲突，所以需要先 pull 过来同步。 git pull 命令用于从远程获取代码并合并本地的版本。
git pull 其实就是 git fetch 和 git merge FETCH_HEAD 的简写。 命令格式如下：</description></item></channel></rss>