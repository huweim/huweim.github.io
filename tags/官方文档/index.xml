<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>官方文档 on Cory Code</title><link>https://huweim.github.io/tags/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/</link><description>Recent content in 官方文档 on Cory Code</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Athul</copyright><lastBuildDate>Sun, 14 Nov 2021 20:35:44 +0800</lastBuildDate><atom:link href="https://huweim.github.io/tags/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>Software Design of GPGPU-Sim</title><link>https://huweim.github.io/posts/%E6%96%87%E6%A1%A3_software-design-of-gpgpu-sim/</link><pubDate>Sun, 14 Nov 2021 20:35:44 +0800</pubDate><guid>https://huweim.github.io/posts/%E6%96%87%E6%A1%A3_software-design-of-gpgpu-sim/</guid><description>4 Software Design of GPGPU-Sim
所有标题都可以升一级，整个文档全是 manual 的第 4 章
1. File list and brief description cuda-sim - The functional simulator that executes PTX kernels generated by NVCC or OpenCL compiler gpgpu-sim - The performance simulator that simulates the timing behavior of a GPU (or other many core accelerator architectures) intersim - The interconnection network simulator adopted from Bill Dally&amp;rsquo;s BookSim 1.1 Overall/Utilities abstract_hardware_model.h abstract_hardware_model.cc Provide a set of classes that interface between functional and timing simulator.</description></item><item><title>文档_GPGPU-sim - Performance Simulation Engine</title><link>https://huweim.github.io/posts/%E6%96%87%E6%A1%A3_gpgpu-sim-performance-simulation-engine/</link><pubDate>Tue, 28 Sep 2021 14:59:35 +0800</pubDate><guid>https://huweim.github.io/posts/%E6%96%87%E6%A1%A3_gpgpu-sim-performance-simulation-engine/</guid><description>GPGPU-sim - Performance Simulation Engine
1 Performance Model Software Objects ldst_unit *m_ldst_unit; 前面的 m 可能表示这个类型的变量
1.2 SIMT Core Class SIMT Core 中的微架构在 shader.h/cc 的类 shader_core_ctx 中实现
shd_warp_t objects 的集合用于建模每个 warp 在 core 中的状态 simt_stack object, 处理每个 warp 的分支 set of scheduler_unit obj, 选择 set 中 warp 的一条 or 多条指令发射执行 Scoreboard obj 处理 data hazard opndcoll_rfu_t obj, model operand collector set of simd_function_unit obj 实现 ALU pipeline ldst_unit 实现 memory pipeline shader_memroy_interface 将 SIMT Core 连接到相应的 SIMT Core Cluster 每个 core cycle, 调用 shader_core_ctx::cycle() 来模拟 SIMT Core 的一个 cycle。cycle function 以按从下往上的顺序 (也就是从 writeback() 到 fetch()) 调用下列函数</description></item><item><title>SIMT_Core</title><link>https://huweim.github.io/posts/%E6%96%87%E6%A1%A3_simt_core/</link><pubDate>Sat, 04 Sep 2021 19:04:57 +0800</pubDate><guid>https://huweim.github.io/posts/%E6%96%87%E6%A1%A3_simt_core/</guid><description>0. 前言 搞懂 SIMT Core 对于理解 GPGPU 的指令 fetch、指令发射、内存访问、数据传输等步骤非常重要，按照 GPGPU-Sim 的官方文档进行一个简单的梳理
SIMT Core 的微架构模型中有几个比较重要的硬件单元，接下来会一一介绍他们的作用，
000 放一个硬件概念对应表 1. Front End Instruction cache access Instruction buffer logic Scoreboard Scheduling logic SIMT stack 1.1 Fetch and Decode 这里介绍整个指令 Fetch and Decode 阶段，涉及到的硬件单元主要是 Fetch, I-Cache, Decode, I-Buffer, ScoreBoard
I. Fetch Fetch 单元是一个调度器，作用
根据 PC 的值，从 I-Cache 中取指令，即发送内存请求。 对于一个 warp，如果在 I-Buffer 中没有任何 valid 指令 (valid bit 作用在 III. I-Buffer 中有介绍)，那么这个 warp 就可以进行 instruction fetch。</description></item></channel></rss>