<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>官方文档 on Cory Code</title>
    <link>http://localhost:1313/tags/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/</link>
    <description>Recent content in 官方文档 on Cory Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Athul</copyright>
    <lastBuildDate>Sat, 04 Sep 2021 19:04:57 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SIMT_Core</title>
      <link>http://localhost:1313/posts/simt_core/</link>
      <pubDate>Sat, 04 Sep 2021 19:04:57 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/simt_core/</guid>
      <description>0. 前言 搞懂 SIMT Core 对于理解 GPGPU 的指令 fetch、指令发射、内存访问、数据传输等步骤非常重要，按照 GPGPU-Sim 的官方文档进行一个简单的梳理
SIMT Core 的微架构模型分为
000 放一个硬件概念对应表 1. Front End  Instruction cache access Instruction buffer logic Scoreboard Scheduling logic SIMT stack  1.1 Fetch and Decode 这里介绍整个指令 Fetch and Decode 阶段，涉及到的硬件单元主要是 Fetch, I-Cache, Decode, I-Buffer, ScoreBoard
I. Fetch Fetch 单元是一个调度器，作用
 根据 PC 的值，从 I-Cache 中取指令，即发送内存请求。 Check 是否有 warp 已经完成执行，以更新 I-Buffer 信息  对于一个 warp，如果在 I-Buffer 中没有任何 valid 指令 (valid bit 作用在 III.</description>
    </item>
    
  </channel>
</rss>